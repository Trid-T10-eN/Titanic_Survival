from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
test = pd.read_csv('/content/drive/My Drive/test.csv')
train = pd.read_csv('/content/drive/My Drive/train.csv')
gs = pd.read_csv('/content/drive/My Drive/gender_submission.csv')
test.head()
train.head()
test.info()
test.isnull().sum()
test.columns


#CLEANING THE DATA

test = test.drop(["Cabin"], axis = 1)
test["Age"].fillna(test["Age"].mean(), inplace = True)
test["Fare"].fillna(test["Fare"].mean(), inplace = True)
test.isnull().sum()
women = train.loc[train.Sex == 'female']["Survived"]
rate_women = sum(women)/len(women)
print("% of women who survived:", rate_women*100)

men = train.loc[train.Sex == 'male']["Survived"]
rate_men = sum(men)/len(men)
print("% of men who survived:", rate_men*100)

#TRAINING MODELS, AND TRYING TO CROSS-CHECK

from sklearn.ensemble import RandomModelClassifier
y = train["Survived"]
features = ["Pclass", "Sex", "SibSp", "Parch"]
X = pd.get_dummies(train[features])
X_train = pd.get_dummies(test[features])
model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)
model.fit(X, y)
predictions = model.predict(X_train)

from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
import numpy as np
X = np.asarray(X).astype(float)
y = np.asarray(y).astype(float)
sm.add_constant(X)
ols = sm.OLS(y, X)
results = ols.fit()
results.summary()

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
def metrics(y_true, y_pred):
      mse = mean_squared_error(y_true, y_pred)
      rmse = np.sqrt(mean_squared_error(y_true, y_pred))
      R_sqrd = r2_score(y_true, y_pred)
      mae = mean_absolute_error(y_true, y_pred)

      return mse, rmse, R_sqrd, mae

ols_mets = metrics(y, results.predict(X))
predictions_train = model.predict(X)
rf_mets = metrics(y, predictions_train)

print(ols_mets)
print(rf_mets)


#VISUALIZING DATA

import matplotlib.pyplot as plt
import seaborn as sns

sns.countplot(x = 'Sex', data = train, hue = "Survived", color = "green")
plt.xlabel("Sex")
plt.ylabel("Count")
plt.title("Sex Distribution")
plt.show()

sns.countplot(x = 'Embarked', data = test, color = "yellow")
plt.xlabel("Embarked")
plt.ylabel("Count")
plt.title("Embark Distribution")
plt.show()

train["Survived"] = train["Survived"].map({0: "No", 1: "Yes"})
sns.countplot(x = 'Pclass', hue = "Survived", data = train)
plt.xlabel("Pclass")
plt.ylabel("Count")
plt.title("Pclass V Survival Distribution")
plt.show()

plt.figure(figsize=(10, 6))
test.boxplot(column='Age', by='Sex', color = "purple")
plt.title('Age Distribution by Gender')
plt.suptitle('')
plt.xlabel('Gender')
plt.ylabel('Age')
plt.show()
